name: Python CI Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]


jobs:
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.11" ]

    steps:
      # 1. Checkout des Repositories
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2. Set up Python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # 3. Cache pip dependencies
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 4. Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel cython
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # 5. Linting mit flake8
      # Flake8 prüft auf PEP8-Konformität und häufige Programmierfehler.
      # --count: Zeigt die Gesamtzahl der Fehler an.
      # --select=...: Ignoriert bestimmte, oft zu strenge Warnungen (hier: Zeilenlänge und komplexe Importe).
      # --show-source: Zeigt die fehlerhafte Codezeile an.
      # --statistics: Zählt die Vorkommen jedes Fehlers.
      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit on --count > 0, aber ignoriere bestimmte Fehler (z.B. Zeilenlänge)
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics

      # 6. Run tests with pytest
      - name: Test with pytest
        run: |
          pytest